@{
    // View
    View = this;

    // Check action result
    if (mtUserAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtUserAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(mtUserAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { mt_user: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fmt_useradd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fmt_useradd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["_UserName", [fields._UserName.visible && fields._UserName.required ? ew.Validators.required(fields._UserName.caption) : null], fields._UserName.isInvalid],
            ["UserPassword", [fields.UserPassword.visible && fields.UserPassword.required ? ew.Validators.required(fields.UserPassword.caption) : null], fields.UserPassword.isInvalid],
            ["_UserLevel", [fields._UserLevel.visible && fields._UserLevel.required ? ew.Validators.required(fields._UserLevel.caption) : null], fields._UserLevel.isInvalid],
            ["UserEmail", [fields.UserEmail.visible && fields.UserEmail.required ? ew.Validators.required(fields.UserEmail.caption) : null], fields.UserEmail.isInvalid],
            ["Full_Name", [fields.Full_Name.visible && fields.Full_Name.required ? ew.Validators.required(fields.Full_Name.caption) : null], fields.Full_Name.isInvalid],
            ["Position", [fields.Position.visible && fields.Position.required ? ew.Validators.required(fields.Position.caption) : null], fields.Position.isInvalid],
            ["Department", [fields.Department.visible && fields.Department.required ? ew.Validators.required(fields.Department.caption) : null], fields.Department.isInvalid],
            ["Division", [fields.Division.visible && fields.Division.required ? ew.Validators.required(fields.Division.caption) : null], fields.Division.isInvalid],
            ["Area", [fields.Area.visible && fields.Area.required ? ew.Validators.required(fields.Area.caption) : null], fields.Area.isInvalid],
            ["ETL_Date", [fields.ETL_Date.visible && fields.ETL_Date.required ? ew.Validators.required(fields.ETL_Date.caption) : null, ew.Validators.datetime(fields.ETL_Date.clientFormatPattern)], fields.ETL_Date.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "_UserLevel": @Html.Raw(mtUserAdd._UserLevel.ToClientList(mtUserAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@mtUserAdd.ShowPageHeader()
@mtUserAdd.ShowMessages()
<form name="fmt_useradd" id="fmt_useradd" class="@(mtUserAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(mtUserAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(mtUserAdd.OldKeyName)" value="@Html.Raw(mtUserAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (mtUserAdd._UserName.Visible) { // mtUserAdd._UserName.Visible (begin)
    <div id="r__UserName" @Html.Raw(mtUserAdd._UserName.RowAttributes)>
        <label id="elh_mt_user__UserName" for="x__UserName" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd._UserName.Caption)@Html.Raw(mtUserAdd._UserName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd._UserName.CellAttributes)>
<span id="el_mt_user__UserName">
<input type="@(mtUserAdd._UserName.InputTextType)" name="x__UserName" id="x__UserName" data-table="mt_user" data-field="x__UserName" value="@Html.Raw(mtUserAdd._UserName.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(mtUserAdd._UserName.PlaceHolder))" data-format-pattern="@(mtUserAdd._UserName.FormatPattern)"@Html.Raw(mtUserAdd._UserName.EditAttributes) aria-describedby="x__UserName_help">
@Html.Raw(mtUserAdd._UserName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd._UserName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd._UserName.Visible (end) *@
@if (mtUserAdd.UserPassword.Visible) { // mtUserAdd.UserPassword.Visible (begin)
    <div id="r_UserPassword" @Html.Raw(mtUserAdd.UserPassword.RowAttributes)>
        <label id="elh_mt_user_UserPassword" for="x_UserPassword" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.UserPassword.Caption)@Html.Raw(mtUserAdd.UserPassword.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.UserPassword.CellAttributes)>
<span id="el_mt_user_UserPassword">
<input type="@(mtUserAdd.UserPassword.InputTextType)" name="x_UserPassword" id="x_UserPassword" data-table="mt_user" data-field="x_UserPassword" value="@Html.Raw(mtUserAdd.UserPassword.EditValue)" size="30" maxlength="200" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.UserPassword.PlaceHolder))" data-format-pattern="@(mtUserAdd.UserPassword.FormatPattern)"@Html.Raw(mtUserAdd.UserPassword.EditAttributes) aria-describedby="x_UserPassword_help">
@Html.Raw(mtUserAdd.UserPassword.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.UserPassword.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.UserPassword.Visible (end) *@
@if (mtUserAdd._UserLevel.Visible) { // mtUserAdd._UserLevel.Visible (begin)
    <div id="r__UserLevel" @Html.Raw(mtUserAdd._UserLevel.RowAttributes)>
        <label id="elh_mt_user__UserLevel" for="x__UserLevel" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd._UserLevel.Caption)@Html.Raw(mtUserAdd._UserLevel.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd._UserLevel.CellAttributes)>
@if (!Security.IsAdmin && Security.IsLoggedIn) { // Non system admin
<span id="el_mt_user__UserLevel">
<span class="form-control-plaintext">@Html.Raw(mtUserAdd._UserLevel.DisplayValue(mtUserAdd._UserLevel.EditValue))</span>
</span>
} else {
<span id="el_mt_user__UserLevel">
    <select
        id="x__UserLevel"
        name="x__UserLevel"
        class="form-select ew-select@(mtUserAdd._UserLevel.IsInvalidClass)"
        data-select2-id="fmt_useradd_x__UserLevel"
        data-table="mt_user"
        data-field="x__UserLevel"
        data-value-separator="@(mtUserAdd._UserLevel.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(mtUserAdd._UserLevel.PlaceHolder))"
        @Html.Raw(mtUserAdd._UserLevel.EditAttributes)>
        @(mtUserAdd._UserLevel.SelectOptionListHtml("x__UserLevel"))
    </select>
    @Html.Raw(mtUserAdd._UserLevel.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(mtUserAdd._UserLevel.GetErrorMessage())</div>
@Html.Raw(mtUserAdd._UserLevel.Lookup.GetParamTag(mtUserAdd, "p_x__UserLevel"))
<script>
loadjs.ready("fmt_useradd", function() {
    var options = { name: "x__UserLevel", selectId: "fmt_useradd_x__UserLevel" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fmt_useradd.lists._UserLevel?.lookupOptions.length) {
        options.data = { id: "x__UserLevel", form: "fmt_useradd" };
    } else {
        options.ajax = { id: "x__UserLevel", form: "fmt_useradd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.mt_user.fields._UserLevel.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
}
</div></div>
    </div>
} @* mtUserAdd._UserLevel.Visible (end) *@
@if (mtUserAdd.UserEmail.Visible) { // mtUserAdd.UserEmail.Visible (begin)
    <div id="r_UserEmail" @Html.Raw(mtUserAdd.UserEmail.RowAttributes)>
        <label id="elh_mt_user_UserEmail" for="x_UserEmail" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.UserEmail.Caption)@Html.Raw(mtUserAdd.UserEmail.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.UserEmail.CellAttributes)>
<span id="el_mt_user_UserEmail">
<input type="@(mtUserAdd.UserEmail.InputTextType)" name="x_UserEmail" id="x_UserEmail" data-table="mt_user" data-field="x_UserEmail" value="@Html.Raw(mtUserAdd.UserEmail.EditValue)" size="30" maxlength="200" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.UserEmail.PlaceHolder))" data-format-pattern="@(mtUserAdd.UserEmail.FormatPattern)"@Html.Raw(mtUserAdd.UserEmail.EditAttributes) aria-describedby="x_UserEmail_help">
@Html.Raw(mtUserAdd.UserEmail.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.UserEmail.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.UserEmail.Visible (end) *@
@if (mtUserAdd.Full_Name.Visible) { // mtUserAdd.Full_Name.Visible (begin)
    <div id="r_Full_Name" @Html.Raw(mtUserAdd.Full_Name.RowAttributes)>
        <label id="elh_mt_user_Full_Name" for="x_Full_Name" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Full_Name.Caption)@Html.Raw(mtUserAdd.Full_Name.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Full_Name.CellAttributes)>
<span id="el_mt_user_Full_Name">
<input type="@(mtUserAdd.Full_Name.InputTextType)" name="x_Full_Name" id="x_Full_Name" data-table="mt_user" data-field="x_Full_Name" value="@Html.Raw(mtUserAdd.Full_Name.EditValue)" size="30" maxlength="200" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.Full_Name.PlaceHolder))" data-format-pattern="@(mtUserAdd.Full_Name.FormatPattern)"@Html.Raw(mtUserAdd.Full_Name.EditAttributes) aria-describedby="x_Full_Name_help">
@Html.Raw(mtUserAdd.Full_Name.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Full_Name.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Full_Name.Visible (end) *@
@if (mtUserAdd.Position.Visible) { // mtUserAdd.Position.Visible (begin)
    <div id="r_Position" @Html.Raw(mtUserAdd.Position.RowAttributes)>
        <label id="elh_mt_user_Position" for="x_Position" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Position.Caption)@Html.Raw(mtUserAdd.Position.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Position.CellAttributes)>
<span id="el_mt_user_Position">
<input type="@(mtUserAdd.Position.InputTextType)" name="x_Position" id="x_Position" data-table="mt_user" data-field="x_Position" value="@Html.Raw(mtUserAdd.Position.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.Position.PlaceHolder))" data-format-pattern="@(mtUserAdd.Position.FormatPattern)"@Html.Raw(mtUserAdd.Position.EditAttributes) aria-describedby="x_Position_help">
@Html.Raw(mtUserAdd.Position.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Position.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Position.Visible (end) *@
@if (mtUserAdd.Department.Visible) { // mtUserAdd.Department.Visible (begin)
    <div id="r_Department" @Html.Raw(mtUserAdd.Department.RowAttributes)>
        <label id="elh_mt_user_Department" for="x_Department" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Department.Caption)@Html.Raw(mtUserAdd.Department.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Department.CellAttributes)>
<span id="el_mt_user_Department">
<input type="@(mtUserAdd.Department.InputTextType)" name="x_Department" id="x_Department" data-table="mt_user" data-field="x_Department" value="@Html.Raw(mtUserAdd.Department.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.Department.PlaceHolder))" data-format-pattern="@(mtUserAdd.Department.FormatPattern)"@Html.Raw(mtUserAdd.Department.EditAttributes) aria-describedby="x_Department_help">
@Html.Raw(mtUserAdd.Department.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Department.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Department.Visible (end) *@
@if (mtUserAdd.Division.Visible) { // mtUserAdd.Division.Visible (begin)
    <div id="r_Division" @Html.Raw(mtUserAdd.Division.RowAttributes)>
        <label id="elh_mt_user_Division" for="x_Division" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Division.Caption)@Html.Raw(mtUserAdd.Division.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Division.CellAttributes)>
<span id="el_mt_user_Division">
<input type="@(mtUserAdd.Division.InputTextType)" name="x_Division" id="x_Division" data-table="mt_user" data-field="x_Division" value="@Html.Raw(mtUserAdd.Division.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.Division.PlaceHolder))" data-format-pattern="@(mtUserAdd.Division.FormatPattern)"@Html.Raw(mtUserAdd.Division.EditAttributes) aria-describedby="x_Division_help">
@Html.Raw(mtUserAdd.Division.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Division.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Division.Visible (end) *@
@if (mtUserAdd.Area.Visible) { // mtUserAdd.Area.Visible (begin)
    <div id="r_Area" @Html.Raw(mtUserAdd.Area.RowAttributes)>
        <label id="elh_mt_user_Area" for="x_Area" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.Area.Caption)@Html.Raw(mtUserAdd.Area.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.Area.CellAttributes)>
<span id="el_mt_user_Area">
<input type="@(mtUserAdd.Area.InputTextType)" name="x_Area" id="x_Area" data-table="mt_user" data-field="x_Area" value="@Html.Raw(mtUserAdd.Area.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.Area.PlaceHolder))" data-format-pattern="@(mtUserAdd.Area.FormatPattern)"@Html.Raw(mtUserAdd.Area.EditAttributes) aria-describedby="x_Area_help">
@Html.Raw(mtUserAdd.Area.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.Area.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* mtUserAdd.Area.Visible (end) *@
@if (mtUserAdd.ETL_Date.Visible) { // mtUserAdd.ETL_Date.Visible (begin)
    <div id="r_ETL_Date" @Html.Raw(mtUserAdd.ETL_Date.RowAttributes)>
        <label id="elh_mt_user_ETL_Date" for="x_ETL_Date" class="@(mtUserAdd.LeftColumnClass)">@Html.Raw(mtUserAdd.ETL_Date.Caption)@Html.Raw(mtUserAdd.ETL_Date.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(mtUserAdd.RightColumnClass)"><div @Html.Raw(mtUserAdd.ETL_Date.CellAttributes)>
<span id="el_mt_user_ETL_Date">
<input type="@(mtUserAdd.ETL_Date.InputTextType)" name="x_ETL_Date" id="x_ETL_Date" data-table="mt_user" data-field="x_ETL_Date" value="@Html.Raw(mtUserAdd.ETL_Date.EditValue)" placeholder="@Html.Raw(HtmlEncode(mtUserAdd.ETL_Date.PlaceHolder))" data-format-pattern="@(mtUserAdd.ETL_Date.FormatPattern)"@Html.Raw(mtUserAdd.ETL_Date.EditAttributes) aria-describedby="x_ETL_Date_help">
@Html.Raw(mtUserAdd.ETL_Date.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(mtUserAdd.ETL_Date.GetErrorMessage())</div>
@if (!mtUserAdd.ETL_Date.ReadOnly && !mtUserAdd.ETL_Date.Disabled && !mtUserAdd.ETL_Date.EditAttrs.Is("readonly") && !mtUserAdd.ETL_Date.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fmt_useradd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fmt_useradd", "x_ETL_Date", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* mtUserAdd.ETL_Date.Visible (end) *@
</div><!-- /page* -->
@{ mtUserAdd.CloseRecordset(); }
@Html.Raw(mtUserAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(mtUserAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fmt_useradd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fmt_useradd" data-href="@AppPath(mtUserAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(mtUserAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@mtUserAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("mt_user");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
