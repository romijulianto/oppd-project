@{
    // View
    View = this;

    // Check action result
    if (logApiEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!logApiEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@logApiEdit.ShowPageHeader()
@logApiEdit.ShowMessages()
<main class="edit">
<form name="flog_APIedit" id="flog_APIedit" class="@(logApiEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(logApiEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { log_API: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var flog_APIedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("flog_APIedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["id", [fields.id.visible && fields.id.required ? ew.Validators.required(fields.id.caption) : null, ew.Validators.integer], fields.id.isInvalid],
            ["API_Type", [fields.API_Type.visible && fields.API_Type.required ? ew.Validators.required(fields.API_Type.caption) : null], fields.API_Type.isInvalid],
            ["API_Link", [fields.API_Link.visible && fields.API_Link.required ? ew.Validators.required(fields.API_Link.caption) : null], fields.API_Link.isInvalid],
            ["API_Body", [fields.API_Body.visible && fields.API_Body.required ? ew.Validators.required(fields.API_Body.caption) : null], fields.API_Body.isInvalid],
            ["API_Status", [fields.API_Status.visible && fields.API_Status.required ? ew.Validators.required(fields.API_Status.caption) : null], fields.API_Status.isInvalid],
            ["API_Result", [fields.API_Result.visible && fields.API_Result.required ? ew.Validators.required(fields.API_Result.caption) : null], fields.API_Result.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(logApiEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(logApiEdit.OldKeyName)" value="@Html.Raw(logApiEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (logApiEdit.id.Visible) { // logApiEdit.id.Visible (begin)
    <div id="r_id" @Html.Raw(logApiEdit.id.RowAttributes)>
        <label id="elh_log_API_id" for="x_id" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.id.Caption)@Html.Raw(logApiEdit.id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.id.CellAttributes)>
<span id="el_log_API_id">
<input type="@(logApiEdit.id.InputTextType)" name="x_id" id="x_id" data-table="log_API" data-field="x_id" value="@Html.Raw(logApiEdit.id.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(logApiEdit.id.PlaceHolder))" data-format-pattern="@(logApiEdit.id.FormatPattern)"@Html.Raw(logApiEdit.id.EditAttributes) aria-describedby="x_id_help">
@Html.Raw(logApiEdit.id.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.id.GetErrorMessage())</div>
<input type="hidden" data-table="log_API" data-field="x_id" data-hidden="1" data-old name="o_id" id="o_id" value="@Html.Raw(HtmlEncode(logApiEdit.id.OldValue ?? logApiEdit.id.CurrentValue))">
</span>
</div></div>
    </div>
} @* logApiEdit.id.Visible (end) *@
@if (logApiEdit.API_Type.Visible) { // logApiEdit.API_Type.Visible (begin)
    <div id="r_API_Type" @Html.Raw(logApiEdit.API_Type.RowAttributes)>
        <label id="elh_log_API_API_Type" for="x_API_Type" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.API_Type.Caption)@Html.Raw(logApiEdit.API_Type.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.API_Type.CellAttributes)>
<span id="el_log_API_API_Type">
<input type="@(logApiEdit.API_Type.InputTextType)" name="x_API_Type" id="x_API_Type" data-table="log_API" data-field="x_API_Type" value="@Html.Raw(logApiEdit.API_Type.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(logApiEdit.API_Type.PlaceHolder))" data-format-pattern="@(logApiEdit.API_Type.FormatPattern)"@Html.Raw(logApiEdit.API_Type.EditAttributes) aria-describedby="x_API_Type_help">
@Html.Raw(logApiEdit.API_Type.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.API_Type.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* logApiEdit.API_Type.Visible (end) *@
@if (logApiEdit.API_Link.Visible) { // logApiEdit.API_Link.Visible (begin)
    <div id="r_API_Link" @Html.Raw(logApiEdit.API_Link.RowAttributes)>
        <label id="elh_log_API_API_Link" for="x_API_Link" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.API_Link.Caption)@Html.Raw(logApiEdit.API_Link.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.API_Link.CellAttributes)>
<span id="el_log_API_API_Link">
<input type="@(logApiEdit.API_Link.InputTextType)" name="x_API_Link" id="x_API_Link" data-table="log_API" data-field="x_API_Link" value="@Html.Raw(logApiEdit.API_Link.EditValue)" size="30" maxlength="300" placeholder="@Html.Raw(HtmlEncode(logApiEdit.API_Link.PlaceHolder))" data-format-pattern="@(logApiEdit.API_Link.FormatPattern)"@Html.Raw(logApiEdit.API_Link.EditAttributes) aria-describedby="x_API_Link_help">
@Html.Raw(logApiEdit.API_Link.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.API_Link.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* logApiEdit.API_Link.Visible (end) *@
@if (logApiEdit.API_Body.Visible) { // logApiEdit.API_Body.Visible (begin)
    <div id="r_API_Body" @Html.Raw(logApiEdit.API_Body.RowAttributes)>
        <label id="elh_log_API_API_Body" for="x_API_Body" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.API_Body.Caption)@Html.Raw(logApiEdit.API_Body.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.API_Body.CellAttributes)>
<span id="el_log_API_API_Body">
<input type="@(logApiEdit.API_Body.InputTextType)" name="x_API_Body" id="x_API_Body" data-table="log_API" data-field="x_API_Body" value="@Html.Raw(logApiEdit.API_Body.EditValue)" size="30" maxlength="4000" placeholder="@Html.Raw(HtmlEncode(logApiEdit.API_Body.PlaceHolder))" data-format-pattern="@(logApiEdit.API_Body.FormatPattern)"@Html.Raw(logApiEdit.API_Body.EditAttributes) aria-describedby="x_API_Body_help">
@Html.Raw(logApiEdit.API_Body.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.API_Body.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* logApiEdit.API_Body.Visible (end) *@
@if (logApiEdit.API_Status.Visible) { // logApiEdit.API_Status.Visible (begin)
    <div id="r_API_Status" @Html.Raw(logApiEdit.API_Status.RowAttributes)>
        <label id="elh_log_API_API_Status" for="x_API_Status" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.API_Status.Caption)@Html.Raw(logApiEdit.API_Status.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.API_Status.CellAttributes)>
<span id="el_log_API_API_Status">
<input type="@(logApiEdit.API_Status.InputTextType)" name="x_API_Status" id="x_API_Status" data-table="log_API" data-field="x_API_Status" value="@Html.Raw(logApiEdit.API_Status.EditValue)" size="30" maxlength="1" placeholder="@Html.Raw(HtmlEncode(logApiEdit.API_Status.PlaceHolder))" data-format-pattern="@(logApiEdit.API_Status.FormatPattern)"@Html.Raw(logApiEdit.API_Status.EditAttributes) aria-describedby="x_API_Status_help">
@Html.Raw(logApiEdit.API_Status.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.API_Status.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* logApiEdit.API_Status.Visible (end) *@
@if (logApiEdit.API_Result.Visible) { // logApiEdit.API_Result.Visible (begin)
    <div id="r_API_Result" @Html.Raw(logApiEdit.API_Result.RowAttributes)>
        <label id="elh_log_API_API_Result" for="x_API_Result" class="@(logApiEdit.LeftColumnClass)">@Html.Raw(logApiEdit.API_Result.Caption)@Html.Raw(logApiEdit.API_Result.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(logApiEdit.RightColumnClass)"><div @Html.Raw(logApiEdit.API_Result.CellAttributes)>
<span id="el_log_API_API_Result">
<input type="@(logApiEdit.API_Result.InputTextType)" name="x_API_Result" id="x_API_Result" data-table="log_API" data-field="x_API_Result" value="@Html.Raw(logApiEdit.API_Result.EditValue)" size="30" maxlength="4000" placeholder="@Html.Raw(HtmlEncode(logApiEdit.API_Result.PlaceHolder))" data-format-pattern="@(logApiEdit.API_Result.FormatPattern)"@Html.Raw(logApiEdit.API_Result.EditAttributes) aria-describedby="x_API_Result_help">
@Html.Raw(logApiEdit.API_Result.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(logApiEdit.API_Result.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* logApiEdit.API_Result.Visible (end) *@
</div><!-- /page* -->
@{ logApiEdit.CloseRecordset(); }
@Html.Raw(logApiEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(logApiEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="flog_APIedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="flog_APIedit" data-href="@AppPath(logApiEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(logApiEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@logApiEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("log_API");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
